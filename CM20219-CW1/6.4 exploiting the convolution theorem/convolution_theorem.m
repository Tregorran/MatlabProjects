%function [newImage, biggerImage] = convolution_theorem(image, kernel)
function [resultImage, biggerImage] = convolution_theorem(image, kernel)
    [imageHeight, imageWidth] = size(image);
    [kernelHeight, kernelWidth] = size(kernel);
    
    finalRow = (imageHeight + kernelHeight)-1;
    finalColumn = (imageWidth + kernelWidth)-1;
    
    %padding
    image = replicateImage(image,finalRow,finalColumn, kernel);
    kernel = expandKernel(kernel,finalRow,finalColumn);
    
    %convert to the freqency domain
    FT = fft2(image);
    FTkernel = fft2(kernel);

    FFT = FTkernel.*FT;
    
    %change the image back to the time domain
    newFFT = ifft2(FFT);
    
    %make smaller
    newImage = zeros(imageHeight,imageWidth);
    
    %remove padding
    for x = 1: imageHeight
        for y = 1: imageWidth
            newImage(x,y) = newFFT(x+((kernelHeight-1)/2),y+((kernelWidth-1)/2));
        end
    end
    
    resultImage = newImage;
end

function result = expandKernel(matrix, column, row)
    newImage = zeros(column,row);

    [matrixHeight, matrixWidth] = size(matrix);
    
    for i = 1: matrixHeight
        for j = 1: matrixWidth
            newImage(i, j) = matrix(i, j);
        end
    end
    result = newImage;
end

function result = replicateImage(image, column, row, kernel)
    biggerImage = zeros(column, row);
    [imageHeight, imageWidth] = size(image);
    [kernelHeight, kernelWidth] = size(kernel);
    
    %copy image into the bigger image   
    for x = 1: imageHeight
        for y = 1: imageWidth
            biggerImage(x,y) = image(x,y);
        end
    end
    
    %bottom row
    for x = imageWidth: column
        for y = 1: imageHeight
            biggerImage(x, y) = image(imageHeight, y);
        end
    end
    
    %right column
    for x = 1: imageHeight
        for y = imageWidth: row - ((kernelWidth-1)/2)
            biggerImage(x, y) = image(x, imageWidth);
        end
    end
    
    %top
    for x = row-(((kernelHeight-1)/2)-1): row
        for y = ((kernelWidth-1)/2): imageWidth
            biggerImage(x, y) = image(1, y);
        end
    end
    
    %left
    for x = 1: imageHeight
        for y = row-(((kernelWidth-1)/2)-1): row
            biggerImage(x, y) = image(x, 1);
        end
    end
    


    
    %topleft + bottomleft = top right corner
    for x = imageHeight+((kernelHeight+1)/2): imageHeight+(kernelHeight-1)
        for y = imageWidth+1: imageWidth+((kernelWidth-1)/2)
            biggerImage(x,y) = image(1,1);
        end
    end

    %bottomleft + topleft = bottom right corner
    for x = imageHeight+1: imageHeight+((kernelHeight-1)/2)
        for y = imageWidth+1: imageWidth+((kernelWidth-1)/2)
            biggerImage(x,y) = image(imageHeight,1);
        end
    end
    
    %topright + bottomright = bottom left corner
    for x = imageHeight+((kernelHeight+1)/2): imageHeight+(kernelHeight-1)
        for y = imageWidth+((kernelWidth+1)/2): imageWidth+(kernelWidth-1)
            biggerImage(x,y) = image(1,imageWidth);
        end
    end
    
    %bottomright + topright = bottom left corner
    for x = imageHeight+1: imageHeight+((kernelHeight-1)/2)
        for y = imageWidth+((kernelWidth+1)/2): imageWidth+(kernelWidth-1)
            biggerImage(x,y) = image(imageHeight,imageWidth);
        end
    end
    
    result = biggerImage;
end